// source: thermal.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var err_pb = require('./err_pb.js');
goog.object.extend(proto, err_pb);
goog.exportSymbol('proto.gsdk.thermal.CheckMode', null, global);
goog.exportSymbol('proto.gsdk.thermal.CheckOrder', null, global);
goog.exportSymbol('proto.gsdk.thermal.Enum', null, global);
goog.exportSymbol('proto.gsdk.thermal.GetConfigRequest', null, global);
goog.exportSymbol('proto.gsdk.thermal.GetConfigResponse', null, global);
goog.exportSymbol('proto.gsdk.thermal.GetTemperatureLogRequest', null, global);
goog.exportSymbol('proto.gsdk.thermal.GetTemperatureLogResponse', null, global);
goog.exportSymbol('proto.gsdk.thermal.MaskDetectionLevel', null, global);
goog.exportSymbol('proto.gsdk.thermal.SetConfigMultiRequest', null, global);
goog.exportSymbol('proto.gsdk.thermal.SetConfigMultiResponse', null, global);
goog.exportSymbol('proto.gsdk.thermal.SetConfigRequest', null, global);
goog.exportSymbol('proto.gsdk.thermal.SetConfigResponse', null, global);
goog.exportSymbol('proto.gsdk.thermal.TemperatureFormat', null, global);
goog.exportSymbol('proto.gsdk.thermal.TemperatureLog', null, global);
goog.exportSymbol('proto.gsdk.thermal.ThermalCamera', null, global);
goog.exportSymbol('proto.gsdk.thermal.ThermalCameraROI', null, global);
goog.exportSymbol('proto.gsdk.thermal.ThermalConfig', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.ThermalCameraROI = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gsdk.thermal.ThermalCameraROI, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.ThermalCameraROI.displayName = 'proto.gsdk.thermal.ThermalCameraROI';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.ThermalCamera = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gsdk.thermal.ThermalCamera, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.ThermalCamera.displayName = 'proto.gsdk.thermal.ThermalCamera';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.ThermalConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gsdk.thermal.ThermalConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.ThermalConfig.displayName = 'proto.gsdk.thermal.ThermalConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.GetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gsdk.thermal.GetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.GetConfigRequest.displayName = 'proto.gsdk.thermal.GetConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.GetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gsdk.thermal.GetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.GetConfigResponse.displayName = 'proto.gsdk.thermal.GetConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.SetConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gsdk.thermal.SetConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.SetConfigRequest.displayName = 'proto.gsdk.thermal.SetConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.SetConfigResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gsdk.thermal.SetConfigResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.SetConfigResponse.displayName = 'proto.gsdk.thermal.SetConfigResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.SetConfigMultiRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gsdk.thermal.SetConfigMultiRequest.repeatedFields_, null);
};
goog.inherits(proto.gsdk.thermal.SetConfigMultiRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.SetConfigMultiRequest.displayName = 'proto.gsdk.thermal.SetConfigMultiRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.SetConfigMultiResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gsdk.thermal.SetConfigMultiResponse.repeatedFields_, null);
};
goog.inherits(proto.gsdk.thermal.SetConfigMultiResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.SetConfigMultiResponse.displayName = 'proto.gsdk.thermal.SetConfigMultiResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.TemperatureLog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gsdk.thermal.TemperatureLog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.TemperatureLog.displayName = 'proto.gsdk.thermal.TemperatureLog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.GetTemperatureLogRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.gsdk.thermal.GetTemperatureLogRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.GetTemperatureLogRequest.displayName = 'proto.gsdk.thermal.GetTemperatureLogRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.gsdk.thermal.GetTemperatureLogResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.gsdk.thermal.GetTemperatureLogResponse.repeatedFields_, null);
};
goog.inherits(proto.gsdk.thermal.GetTemperatureLogResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.gsdk.thermal.GetTemperatureLogResponse.displayName = 'proto.gsdk.thermal.GetTemperatureLogResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.ThermalCameraROI.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.ThermalCameraROI} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.ThermalCameraROI.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    width: jspb.Message.getFieldWithDefault(msg, 3, 0),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.ThermalCameraROI}
 */
proto.gsdk.thermal.ThermalCameraROI.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.ThermalCameraROI;
  return proto.gsdk.thermal.ThermalCameraROI.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.ThermalCameraROI} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.ThermalCameraROI}
 */
proto.gsdk.thermal.ThermalCameraROI.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.ThermalCameraROI.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.ThermalCameraROI} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.ThermalCameraROI.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * optional uint32 x = 1;
 * @return {number}
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.ThermalCameraROI} returns this
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 y = 2;
 * @return {number}
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.ThermalCameraROI} returns this
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 width = 3;
 * @return {number}
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.ThermalCameraROI} returns this
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 height = 4;
 * @return {number}
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.ThermalCameraROI} returns this
 */
proto.gsdk.thermal.ThermalCameraROI.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.ThermalCamera.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.ThermalCamera.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.ThermalCamera} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.ThermalCamera.toObject = function(includeInstance, msg) {
  var f, obj = {
    distance: jspb.Message.getFieldWithDefault(msg, 1, 0),
    emissionrate: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roi: (f = msg.getRoi()) && proto.gsdk.thermal.ThermalCameraROI.toObject(includeInstance, f),
    usebodycompensation: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    compensationtemperature: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.ThermalCamera}
 */
proto.gsdk.thermal.ThermalCamera.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.ThermalCamera;
  return proto.gsdk.thermal.ThermalCamera.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.ThermalCamera} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.ThermalCamera}
 */
proto.gsdk.thermal.ThermalCamera.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDistance(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEmissionrate(value);
      break;
    case 3:
      var value = new proto.gsdk.thermal.ThermalCameraROI;
      reader.readMessage(value,proto.gsdk.thermal.ThermalCameraROI.deserializeBinaryFromReader);
      msg.setRoi(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsebodycompensation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCompensationtemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.ThermalCamera.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.ThermalCamera.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.ThermalCamera} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.ThermalCamera.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDistance();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getEmissionrate();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getRoi();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.gsdk.thermal.ThermalCameraROI.serializeBinaryToWriter
    );
  }
  f = message.getUsebodycompensation();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getCompensationtemperature();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional uint32 distance = 1;
 * @return {number}
 */
proto.gsdk.thermal.ThermalCamera.prototype.getDistance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.ThermalCamera} returns this
 */
proto.gsdk.thermal.ThermalCamera.prototype.setDistance = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 emissionRate = 2;
 * @return {number}
 */
proto.gsdk.thermal.ThermalCamera.prototype.getEmissionrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.ThermalCamera} returns this
 */
proto.gsdk.thermal.ThermalCamera.prototype.setEmissionrate = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ThermalCameraROI ROI = 3;
 * @return {?proto.gsdk.thermal.ThermalCameraROI}
 */
proto.gsdk.thermal.ThermalCamera.prototype.getRoi = function() {
  return /** @type{?proto.gsdk.thermal.ThermalCameraROI} */ (
    jspb.Message.getWrapperField(this, proto.gsdk.thermal.ThermalCameraROI, 3));
};


/**
 * @param {?proto.gsdk.thermal.ThermalCameraROI|undefined} value
 * @return {!proto.gsdk.thermal.ThermalCamera} returns this
*/
proto.gsdk.thermal.ThermalCamera.prototype.setRoi = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gsdk.thermal.ThermalCamera} returns this
 */
proto.gsdk.thermal.ThermalCamera.prototype.clearRoi = function() {
  return this.setRoi(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gsdk.thermal.ThermalCamera.prototype.hasRoi = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool useBodyCompensation = 4;
 * @return {boolean}
 */
proto.gsdk.thermal.ThermalCamera.prototype.getUsebodycompensation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gsdk.thermal.ThermalCamera} returns this
 */
proto.gsdk.thermal.ThermalCamera.prototype.setUsebodycompensation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 compensationTemperature = 5;
 * @return {number}
 */
proto.gsdk.thermal.ThermalCamera.prototype.getCompensationtemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.ThermalCamera} returns this
 */
proto.gsdk.thermal.ThermalCamera.prototype.setCompensationtemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.ThermalConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.ThermalConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.ThermalConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.ThermalConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    checkmode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    checkorder: jspb.Message.getFieldWithDefault(msg, 2, 0),
    temperatureformat: jspb.Message.getFieldWithDefault(msg, 3, 0),
    temperaturethresholdhigh: jspb.Message.getFieldWithDefault(msg, 4, 0),
    audittemperature: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    userejectsound: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    useoverlapthermal: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    camera: (f = msg.getCamera()) && proto.gsdk.thermal.ThermalCamera.toObject(includeInstance, f),
    maskcheckmode: jspb.Message.getFieldWithDefault(msg, 9, 0),
    maskdetectionlevel: jspb.Message.getFieldWithDefault(msg, 10, 0),
    usedynamicroi: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    temperaturethresholdlow: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.ThermalConfig}
 */
proto.gsdk.thermal.ThermalConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.ThermalConfig;
  return proto.gsdk.thermal.ThermalConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.ThermalConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.ThermalConfig}
 */
proto.gsdk.thermal.ThermalConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.gsdk.thermal.CheckMode} */ (reader.readEnum());
      msg.setCheckmode(value);
      break;
    case 2:
      var value = /** @type {!proto.gsdk.thermal.CheckOrder} */ (reader.readEnum());
      msg.setCheckorder(value);
      break;
    case 3:
      var value = /** @type {!proto.gsdk.thermal.TemperatureFormat} */ (reader.readEnum());
      msg.setTemperatureformat(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTemperaturethresholdhigh(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAudittemperature(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUserejectsound(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUseoverlapthermal(value);
      break;
    case 8:
      var value = new proto.gsdk.thermal.ThermalCamera;
      reader.readMessage(value,proto.gsdk.thermal.ThermalCamera.deserializeBinaryFromReader);
      msg.setCamera(value);
      break;
    case 9:
      var value = /** @type {!proto.gsdk.thermal.CheckMode} */ (reader.readEnum());
      msg.setMaskcheckmode(value);
      break;
    case 10:
      var value = /** @type {!proto.gsdk.thermal.MaskDetectionLevel} */ (reader.readEnum());
      msg.setMaskdetectionlevel(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUsedynamicroi(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTemperaturethresholdlow(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.ThermalConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.ThermalConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.ThermalConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.ThermalConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCheckmode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCheckorder();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTemperatureformat();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getTemperaturethresholdhigh();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAudittemperature();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getUserejectsound();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getUseoverlapthermal();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getCamera();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.gsdk.thermal.ThermalCamera.serializeBinaryToWriter
    );
  }
  f = message.getMaskcheckmode();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getMaskdetectionlevel();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getUsedynamicroi();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getTemperaturethresholdlow();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
};


/**
 * optional CheckMode checkMode = 1;
 * @return {!proto.gsdk.thermal.CheckMode}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getCheckmode = function() {
  return /** @type {!proto.gsdk.thermal.CheckMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.gsdk.thermal.CheckMode} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setCheckmode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CheckOrder checkOrder = 2;
 * @return {!proto.gsdk.thermal.CheckOrder}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getCheckorder = function() {
  return /** @type {!proto.gsdk.thermal.CheckOrder} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.gsdk.thermal.CheckOrder} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setCheckorder = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional TemperatureFormat temperatureFormat = 3;
 * @return {!proto.gsdk.thermal.TemperatureFormat}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getTemperatureformat = function() {
  return /** @type {!proto.gsdk.thermal.TemperatureFormat} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.gsdk.thermal.TemperatureFormat} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setTemperatureformat = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional uint32 temperatureThresholdHigh = 4;
 * @return {number}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getTemperaturethresholdhigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setTemperaturethresholdhigh = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool auditTemperature = 5;
 * @return {boolean}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getAudittemperature = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setAudittemperature = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool useRejectSound = 6;
 * @return {boolean}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getUserejectsound = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setUserejectsound = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool useOverlapThermal = 7;
 * @return {boolean}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getUseoverlapthermal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setUseoverlapthermal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional ThermalCamera camera = 8;
 * @return {?proto.gsdk.thermal.ThermalCamera}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getCamera = function() {
  return /** @type{?proto.gsdk.thermal.ThermalCamera} */ (
    jspb.Message.getWrapperField(this, proto.gsdk.thermal.ThermalCamera, 8));
};


/**
 * @param {?proto.gsdk.thermal.ThermalCamera|undefined} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
*/
proto.gsdk.thermal.ThermalConfig.prototype.setCamera = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.clearCamera = function() {
  return this.setCamera(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gsdk.thermal.ThermalConfig.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CheckMode maskCheckMode = 9;
 * @return {!proto.gsdk.thermal.CheckMode}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getMaskcheckmode = function() {
  return /** @type {!proto.gsdk.thermal.CheckMode} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.gsdk.thermal.CheckMode} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setMaskcheckmode = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional MaskDetectionLevel maskDetectionLevel = 10;
 * @return {!proto.gsdk.thermal.MaskDetectionLevel}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getMaskdetectionlevel = function() {
  return /** @type {!proto.gsdk.thermal.MaskDetectionLevel} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.gsdk.thermal.MaskDetectionLevel} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setMaskdetectionlevel = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional bool useDynamicROI = 11;
 * @return {boolean}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getUsedynamicroi = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setUsedynamicroi = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional uint32 temperatureThresholdLow = 12;
 * @return {number}
 */
proto.gsdk.thermal.ThermalConfig.prototype.getTemperaturethresholdlow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.ThermalConfig} returns this
 */
proto.gsdk.thermal.ThermalConfig.prototype.setTemperaturethresholdlow = function(value) {
  return jspb.Message.setProto3IntField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.GetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.GetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.GetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.GetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.GetConfigRequest}
 */
proto.gsdk.thermal.GetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.GetConfigRequest;
  return proto.gsdk.thermal.GetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.GetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.GetConfigRequest}
 */
proto.gsdk.thermal.GetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.GetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.GetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.GetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.GetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.gsdk.thermal.GetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.GetConfigRequest} returns this
 */
proto.gsdk.thermal.GetConfigRequest.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.GetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.GetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.GetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.GetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    config: (f = msg.getConfig()) && proto.gsdk.thermal.ThermalConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.GetConfigResponse}
 */
proto.gsdk.thermal.GetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.GetConfigResponse;
  return proto.gsdk.thermal.GetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.GetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.GetConfigResponse}
 */
proto.gsdk.thermal.GetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gsdk.thermal.ThermalConfig;
      reader.readMessage(value,proto.gsdk.thermal.ThermalConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.GetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.GetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.GetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.GetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.gsdk.thermal.ThermalConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional ThermalConfig config = 1;
 * @return {?proto.gsdk.thermal.ThermalConfig}
 */
proto.gsdk.thermal.GetConfigResponse.prototype.getConfig = function() {
  return /** @type{?proto.gsdk.thermal.ThermalConfig} */ (
    jspb.Message.getWrapperField(this, proto.gsdk.thermal.ThermalConfig, 1));
};


/**
 * @param {?proto.gsdk.thermal.ThermalConfig|undefined} value
 * @return {!proto.gsdk.thermal.GetConfigResponse} returns this
*/
proto.gsdk.thermal.GetConfigResponse.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gsdk.thermal.GetConfigResponse} returns this
 */
proto.gsdk.thermal.GetConfigResponse.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gsdk.thermal.GetConfigResponse.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.SetConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.SetConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.SetConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.SetConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    config: (f = msg.getConfig()) && proto.gsdk.thermal.ThermalConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.SetConfigRequest}
 */
proto.gsdk.thermal.SetConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.SetConfigRequest;
  return proto.gsdk.thermal.SetConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.SetConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.SetConfigRequest}
 */
proto.gsdk.thermal.SetConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = new proto.gsdk.thermal.ThermalConfig;
      reader.readMessage(value,proto.gsdk.thermal.ThermalConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.SetConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.SetConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.SetConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.SetConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gsdk.thermal.ThermalConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.gsdk.thermal.SetConfigRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.SetConfigRequest} returns this
 */
proto.gsdk.thermal.SetConfigRequest.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ThermalConfig config = 2;
 * @return {?proto.gsdk.thermal.ThermalConfig}
 */
proto.gsdk.thermal.SetConfigRequest.prototype.getConfig = function() {
  return /** @type{?proto.gsdk.thermal.ThermalConfig} */ (
    jspb.Message.getWrapperField(this, proto.gsdk.thermal.ThermalConfig, 2));
};


/**
 * @param {?proto.gsdk.thermal.ThermalConfig|undefined} value
 * @return {!proto.gsdk.thermal.SetConfigRequest} returns this
*/
proto.gsdk.thermal.SetConfigRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gsdk.thermal.SetConfigRequest} returns this
 */
proto.gsdk.thermal.SetConfigRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gsdk.thermal.SetConfigRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.SetConfigResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.SetConfigResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.SetConfigResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.SetConfigResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.SetConfigResponse}
 */
proto.gsdk.thermal.SetConfigResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.SetConfigResponse;
  return proto.gsdk.thermal.SetConfigResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.SetConfigResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.SetConfigResponse}
 */
proto.gsdk.thermal.SetConfigResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.SetConfigResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.SetConfigResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.SetConfigResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.SetConfigResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gsdk.thermal.SetConfigMultiRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.SetConfigMultiRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.SetConfigMultiRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.SetConfigMultiRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.SetConfigMultiRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    config: (f = msg.getConfig()) && proto.gsdk.thermal.ThermalConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.SetConfigMultiRequest}
 */
proto.gsdk.thermal.SetConfigMultiRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.SetConfigMultiRequest;
  return proto.gsdk.thermal.SetConfigMultiRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.SetConfigMultiRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.SetConfigMultiRequest}
 */
proto.gsdk.thermal.SetConfigMultiRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setDeviceidsList(value);
      break;
    case 2:
      var value = new proto.gsdk.thermal.ThermalConfig;
      reader.readMessage(value,proto.gsdk.thermal.ThermalConfig.deserializeBinaryFromReader);
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.SetConfigMultiRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.SetConfigMultiRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.SetConfigMultiRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.SetConfigMultiRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceidsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      1,
      f
    );
  }
  f = message.getConfig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.gsdk.thermal.ThermalConfig.serializeBinaryToWriter
    );
  }
};


/**
 * repeated uint32 deviceIDs = 1;
 * @return {!Array<number>}
 */
proto.gsdk.thermal.SetConfigMultiRequest.prototype.getDeviceidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.gsdk.thermal.SetConfigMultiRequest} returns this
 */
proto.gsdk.thermal.SetConfigMultiRequest.prototype.setDeviceidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.gsdk.thermal.SetConfigMultiRequest} returns this
 */
proto.gsdk.thermal.SetConfigMultiRequest.prototype.addDeviceids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gsdk.thermal.SetConfigMultiRequest} returns this
 */
proto.gsdk.thermal.SetConfigMultiRequest.prototype.clearDeviceidsList = function() {
  return this.setDeviceidsList([]);
};


/**
 * optional ThermalConfig config = 2;
 * @return {?proto.gsdk.thermal.ThermalConfig}
 */
proto.gsdk.thermal.SetConfigMultiRequest.prototype.getConfig = function() {
  return /** @type{?proto.gsdk.thermal.ThermalConfig} */ (
    jspb.Message.getWrapperField(this, proto.gsdk.thermal.ThermalConfig, 2));
};


/**
 * @param {?proto.gsdk.thermal.ThermalConfig|undefined} value
 * @return {!proto.gsdk.thermal.SetConfigMultiRequest} returns this
*/
proto.gsdk.thermal.SetConfigMultiRequest.prototype.setConfig = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.gsdk.thermal.SetConfigMultiRequest} returns this
 */
proto.gsdk.thermal.SetConfigMultiRequest.prototype.clearConfig = function() {
  return this.setConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.gsdk.thermal.SetConfigMultiRequest.prototype.hasConfig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gsdk.thermal.SetConfigMultiResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.SetConfigMultiResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.SetConfigMultiResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.SetConfigMultiResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.SetConfigMultiResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceerrorsList: jspb.Message.toObjectList(msg.getDeviceerrorsList(),
    err_pb.ErrorResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.SetConfigMultiResponse}
 */
proto.gsdk.thermal.SetConfigMultiResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.SetConfigMultiResponse;
  return proto.gsdk.thermal.SetConfigMultiResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.SetConfigMultiResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.SetConfigMultiResponse}
 */
proto.gsdk.thermal.SetConfigMultiResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new err_pb.ErrorResponse;
      reader.readMessage(value,err_pb.ErrorResponse.deserializeBinaryFromReader);
      msg.addDeviceerrors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.SetConfigMultiResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.SetConfigMultiResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.SetConfigMultiResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.SetConfigMultiResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceerrorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      err_pb.ErrorResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated gsdk.err.ErrorResponse deviceErrors = 1;
 * @return {!Array<!proto.gsdk.err.ErrorResponse>}
 */
proto.gsdk.thermal.SetConfigMultiResponse.prototype.getDeviceerrorsList = function() {
  return /** @type{!Array<!proto.gsdk.err.ErrorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, err_pb.ErrorResponse, 1));
};


/**
 * @param {!Array<!proto.gsdk.err.ErrorResponse>} value
 * @return {!proto.gsdk.thermal.SetConfigMultiResponse} returns this
*/
proto.gsdk.thermal.SetConfigMultiResponse.prototype.setDeviceerrorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gsdk.err.ErrorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gsdk.err.ErrorResponse}
 */
proto.gsdk.thermal.SetConfigMultiResponse.prototype.addDeviceerrors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gsdk.err.ErrorResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gsdk.thermal.SetConfigMultiResponse} returns this
 */
proto.gsdk.thermal.SetConfigMultiResponse.prototype.clearDeviceerrorsList = function() {
  return this.setDeviceerrorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.TemperatureLog.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.TemperatureLog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.TemperatureLog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.TemperatureLog.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    deviceid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventcode: jspb.Message.getFieldWithDefault(msg, 5, 0),
    subcode: jspb.Message.getFieldWithDefault(msg, 6, 0),
    temperature: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.TemperatureLog}
 */
proto.gsdk.thermal.TemperatureLog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.TemperatureLog;
  return proto.gsdk.thermal.TemperatureLog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.TemperatureLog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.TemperatureLog}
 */
proto.gsdk.thermal.TemperatureLog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setEventcode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSubcode(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.TemperatureLog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.TemperatureLog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.TemperatureLog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.TemperatureLog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventcode();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getSubcode();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional uint32 ID = 1;
 * @return {number}
 */
proto.gsdk.thermal.TemperatureLog.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.TemperatureLog} returns this
 */
proto.gsdk.thermal.TemperatureLog.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 timestamp = 2;
 * @return {number}
 */
proto.gsdk.thermal.TemperatureLog.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.TemperatureLog} returns this
 */
proto.gsdk.thermal.TemperatureLog.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 deviceID = 3;
 * @return {number}
 */
proto.gsdk.thermal.TemperatureLog.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.TemperatureLog} returns this
 */
proto.gsdk.thermal.TemperatureLog.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string userID = 4;
 * @return {string}
 */
proto.gsdk.thermal.TemperatureLog.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.gsdk.thermal.TemperatureLog} returns this
 */
proto.gsdk.thermal.TemperatureLog.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 eventCode = 5;
 * @return {number}
 */
proto.gsdk.thermal.TemperatureLog.prototype.getEventcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.TemperatureLog} returns this
 */
proto.gsdk.thermal.TemperatureLog.prototype.setEventcode = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 subCode = 6;
 * @return {number}
 */
proto.gsdk.thermal.TemperatureLog.prototype.getSubcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.TemperatureLog} returns this
 */
proto.gsdk.thermal.TemperatureLog.prototype.setSubcode = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 temperature = 7;
 * @return {number}
 */
proto.gsdk.thermal.TemperatureLog.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.TemperatureLog} returns this
 */
proto.gsdk.thermal.TemperatureLog.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.GetTemperatureLogRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.GetTemperatureLogRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.GetTemperatureLogRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.GetTemperatureLogRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    starteventid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxnumoflog: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.GetTemperatureLogRequest}
 */
proto.gsdk.thermal.GetTemperatureLogRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.GetTemperatureLogRequest;
  return proto.gsdk.thermal.GetTemperatureLogRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.GetTemperatureLogRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.GetTemperatureLogRequest}
 */
proto.gsdk.thermal.GetTemperatureLogRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStarteventid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxnumoflog(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.GetTemperatureLogRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.GetTemperatureLogRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.GetTemperatureLogRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.GetTemperatureLogRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceid();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getStarteventid();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxnumoflog();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 deviceID = 1;
 * @return {number}
 */
proto.gsdk.thermal.GetTemperatureLogRequest.prototype.getDeviceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.GetTemperatureLogRequest} returns this
 */
proto.gsdk.thermal.GetTemperatureLogRequest.prototype.setDeviceid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 startEventID = 2;
 * @return {number}
 */
proto.gsdk.thermal.GetTemperatureLogRequest.prototype.getStarteventid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.GetTemperatureLogRequest} returns this
 */
proto.gsdk.thermal.GetTemperatureLogRequest.prototype.setStarteventid = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 maxNumOfLog = 3;
 * @return {number}
 */
proto.gsdk.thermal.GetTemperatureLogRequest.prototype.getMaxnumoflog = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.gsdk.thermal.GetTemperatureLogRequest} returns this
 */
proto.gsdk.thermal.GetTemperatureLogRequest.prototype.setMaxnumoflog = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.gsdk.thermal.GetTemperatureLogResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.gsdk.thermal.GetTemperatureLogResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.gsdk.thermal.GetTemperatureLogResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.gsdk.thermal.GetTemperatureLogResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.GetTemperatureLogResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    temperatureeventsList: jspb.Message.toObjectList(msg.getTemperatureeventsList(),
    proto.gsdk.thermal.TemperatureLog.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.gsdk.thermal.GetTemperatureLogResponse}
 */
proto.gsdk.thermal.GetTemperatureLogResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.gsdk.thermal.GetTemperatureLogResponse;
  return proto.gsdk.thermal.GetTemperatureLogResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.gsdk.thermal.GetTemperatureLogResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.gsdk.thermal.GetTemperatureLogResponse}
 */
proto.gsdk.thermal.GetTemperatureLogResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.gsdk.thermal.TemperatureLog;
      reader.readMessage(value,proto.gsdk.thermal.TemperatureLog.deserializeBinaryFromReader);
      msg.addTemperatureevents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.gsdk.thermal.GetTemperatureLogResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.gsdk.thermal.GetTemperatureLogResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.gsdk.thermal.GetTemperatureLogResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.gsdk.thermal.GetTemperatureLogResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTemperatureeventsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.gsdk.thermal.TemperatureLog.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TemperatureLog temperatureEvents = 1;
 * @return {!Array<!proto.gsdk.thermal.TemperatureLog>}
 */
proto.gsdk.thermal.GetTemperatureLogResponse.prototype.getTemperatureeventsList = function() {
  return /** @type{!Array<!proto.gsdk.thermal.TemperatureLog>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.gsdk.thermal.TemperatureLog, 1));
};


/**
 * @param {!Array<!proto.gsdk.thermal.TemperatureLog>} value
 * @return {!proto.gsdk.thermal.GetTemperatureLogResponse} returns this
*/
proto.gsdk.thermal.GetTemperatureLogResponse.prototype.setTemperatureeventsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.gsdk.thermal.TemperatureLog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.gsdk.thermal.TemperatureLog}
 */
proto.gsdk.thermal.GetTemperatureLogResponse.prototype.addTemperatureevents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.gsdk.thermal.TemperatureLog, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.gsdk.thermal.GetTemperatureLogResponse} returns this
 */
proto.gsdk.thermal.GetTemperatureLogResponse.prototype.clearTemperatureeventsList = function() {
  return this.setTemperatureeventsList([]);
};


/**
 * @enum {number}
 */
proto.gsdk.thermal.Enum = {
  FIRST_ENUM_VALUE_MUST_BE_ZERO: 0,
  DEFAULT_HIGH_TEMPERATURE_THRESHOLD: 3800,
  DEFAULT_LOW_TEMPERATURE_THRESHOLD: 3200,
  DEFAULT_DISTANCE: 100,
  DEFAULT_EMISSIVITY: 98,
  DEFAULT_ROI_X: 30,
  DEFAULT_ROI_Y: 25,
  DEFAULT_ROI_WIDTH: 50,
  DEFAULT_ROI_HEIGHT: 55,
  MIN_TEMPERATURE_THRESHOLD: 100,
  MAX_EMPERATURE_THRESHOLD: 4500,
  MIN_DISTANCE: 0,
  MAX_DISTANCE: 244,
  MIN_EMISSIVITY: 95,
  MAX_EMISSIVITY: 98,
  MIN_ROI_X: 0,
  MAX_ROI_X: 99,
  MIN_ROI_Y: 0,
  MAX_ROI_Y: 99,
  MIN_ROI_WIDTH: 0,
  MAX_ROI_WIDTH: 99,
  MIN_ROI_HEIGHT: 0,
  MAX_ROI_HEIGHT: 99,
  MIN_COMPENSATION_TEMPERATURE: -50,
  MAX_COMPENSATION_TEMPERATURE: 50
};

/**
 * @enum {number}
 */
proto.gsdk.thermal.CheckMode = {
  OFF: 0,
  HARD: 1,
  SOFT: 2
};

/**
 * @enum {number}
 */
proto.gsdk.thermal.CheckOrder = {
  AFTER_AUTH: 0,
  BEFORE_AUTH: 1,
  WITHOUT_AUTH: 2
};

/**
 * @enum {number}
 */
proto.gsdk.thermal.TemperatureFormat = {
  FAHRENHEIT: 0,
  CELSIUS: 1
};

/**
 * @enum {number}
 */
proto.gsdk.thermal.MaskDetectionLevel = {
  NOT_USE: 0,
  NORMAL: 1,
  HIGH: 2,
  VERY_HIGH: 3
};

goog.object.extend(exports, proto.gsdk.thermal);
